---
title: "hw1"
jupyter: python3
---

## 다음 표의 내용을 데이터 프레임으로 만들어 출력해 보세요.

```{python}
import pandas as pd

df = pd.DataFrame({"name" : ["사과", "딸기", "수박"],
            "가격" : [1800, 1500, 3000],
            "판매량" : [24, 38, 13]})

df
```
```{python}
## 앞에서 만든 데이터 프레임을 이용해 과일의 가격 평균과 판매량 평균을 구해보세요.

price_total = sum(df["가격"])/3
sell_total = sum(df["판매량"])/3
price_total, sell_total
```
## mpg 데이터를 이용해 분석 문제를 해결해 보세요.
```{python}
### 1. mpg 데이터를 불러와 복사본을 만드세요.
import pandas as pd
file_path = r'C:/Users/USER/Documents/LS빅데이터/mywebsite/data/mpg.csv'
mpg = pd.read_csv(file_path)
mpg_new = mpg.copy()
```
```{python}
### 2.복사본 데이터를 이용해 cty는 city로, hwy는 highway로 수정하세요.
import pandas as pd
mpg_new = mpg_new.rename(columns = {'cit' : 'city', 'hwy' : 'highway'})
mpg_new
```
## midwest.csv는 미국 동북중부(East North Central States) 437개 지역의 인구 통계 정보를 담고 있습니다. midwest.csv를 이용해 데이터 분석 문제를 해결해 보세요.

```{python}

### 1. midwest.csv를 불러와 데이터의 특징을 파악하세요.

import pandas as pd
midwest = pd.read_csv('C:/Users/USER/Documents/LS빅데이터/mywebsite/data/midwest.csv')
midwest
midwest.head()
midwest.tail()
midwest.shape
midwest.info()
midwest.describe()

```
```{python}
### 2. poptotal(전체 인구) 변수를 total로, popasian(아시아 인구) 변수를 asian으로 수정하세요.

midwest_new= midwest.rename(columns = {'poptotal' : 'total', 'popasian' : 'asian'})
midwest_new

```
```{python}
### 3. total, asian 변수를 이용해 '전체 인구 대비 아시아 인구 백분율' 파생변수를 추가하고, 히스토그램을 만들어 분포를 살펴보세요.
import matplotlib.pyplot as plt
midwest_new["asian_per"] = midwest_new["asian"] / midwest_new["total"] * 100
midwest_new["asian_per"].plot.hist()
plt.show()
plt.clf()
```
```{python}
### 4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 'large', 그 외에는 'small'을 부여한 파생변수를 만들어 보세요.

import numpy as np
a = midwest_new["asian_per"].mean()
midwest_new["asian_mean"] = np.where(midwest_new["asian_per"] > a,'large', 'small')
midwest_new

```
```{python}
### 5.'large'와 'small'에 해당하는 지역이 얼마나 많은지 빈도표와 빈도 막대 그래프를 만들어 확인해 보시오.

count_test = midwest_new["asian_mean"].value_counts()
count_test
count_test.plot.bar(rot = 0)
plt.show()

```
## mpg 데이터를 이용해 분석문제를 해결해 보세요.
```{python}
### 1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비) 평균이 더 높은지 알아보세요.
import pandas as pd
mpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터/mywebsite/data/mpg.csv')
a= mpg.query("displ <= 4")
b = mpg.query("displ >= 5")
a_mean = a['hwy'].mean()
b_mean = b['hwy'].mean()
print("배기량 4이상 고속도로 연비 평균:",a_mean, "배기량 4이상 고속도로 연비 평균:", b_mean)
```
```{python}
### 2. 자동차 제조 회사에 따라 도시 연비가 어떻게 다른지 알아보려고 합니다. 'audi'와 'toyota'중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비) 평균이 더 높은지 알아보세요.
import pandas as pd
mpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터/mywebsite/data/mpg.csv')
a = mpg.query('manufacturer == "audi"')
b = mpg.query('manufacturer == "toyota"')

cty_mean_audi = a['cty'].mean()
cty_mean_toyota = b['cty'].mean()
cty_mean_audi
cty_mean_toyota
print("audi 도시 연비 평균:", cty_mean_audi, "toyota 도시 연비 평균:", cty_mean_toyota)
```
```{python}
### 3. 'chevrolet', 'ford', 'honda' 자동차의 고속도로 연비 평균을 알아보려고 합니다. 세 회사의 데이터를 추출한 다음 hwy 전체 평균을 구해 보세요.

import pandas as pd
mpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터/mywebsite/data/mpg.csv')
three_company = mpg.query('manufacturer in ["chevrolet", "ford", "honda"]')
three_mean = three_company["hwy"].mean()
print("세 회사의 hwy 전체 평균:", three_mean)
```
```{python}
### 1. 'audi'에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다. 'audi'에서 생산한 자동차 중 hwy가 1~5위에 해당하는 자동차 데이터를 출력하세요.
import pandas as pd
mpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터/mywebsite/data/mpg.csv')
mpg.query('manufacturer == "audi"')\
    .sort_values('hwy', ascending = False)\
   .head()
```
## mpg 데이터를 이용해 분석문제를 해결해 보세요.
```{python}
### 1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 '합산 연비 변수'를 추가하세요.
import pandas as pd
mpg = pd.read_csv('C:/Users/USER/Documents/LS빅데이터/mywebsite/data/mpg.csv')
df= mpg.copy()
df = df.assign(total = df['hwy']+df['cty'])
df

```
```{python}
### 2. 앞에서 만든 '합산 연비 변수'를 2로 나눠 '평균 연비 변수'를 추가하세요.
df = df.assign(mean = df['total']/2)
df
```
```{python}
### 3. '평균 연비 변수'가 가장 높은 자동차 3종의 데이터를 출력하세요.
df = df.sort_values(['mean'], ascending = False).head(3)
df
```
```{python}
### 4. 1~3번 문제를 해결할 수 있는 하나로 연결된 pandas 구문을 만들어 실행해 보세요. 데이터는 복사본 대신 mpg 원본을 이용하세요.
import pandas as pd
import numpy as np

mpg.assign(total = lambda x : x['hwy'] + x['cty'],
            mean = lambda x : x['total']/2)\
    .sort_values(['mean'], ascending = False)\
    .head(3)

```
